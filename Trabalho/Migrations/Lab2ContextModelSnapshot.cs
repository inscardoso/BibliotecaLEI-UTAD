// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trabalho.Models;

#nullable disable

namespace Trabalho.Migrations
{
    [DbContext(typeof(Lab2Context))]
    partial class Lab2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Trabalho.Areas.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Administradore", b =>
                {
                    b.Property<string>("UsernameAdmin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Admin");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("UsernameAdmin")
                        .HasName("PK__Administ__266ED3E6575F5872");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Trabalho.Models.Autenticado", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Contacto2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Contacto3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Username")
                        .HasName("PK__Autentic__536C85E503316A59");

                    b.ToTable("Autenticado", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Autor", b =>
                {
                    b.Property<int>("IdAutor")
                        .HasColumnType("int")
                        .HasColumnName("ID_Autor");

                    b.Property<string>("NameAutor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Autor");

                    b.HasKey("IdAutor")
                        .HasName("PK__Autor__9626AD264DB6FFA5");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Biblioteca", b =>
                {
                    b.Property<int>("IdBiblioteca")
                        .HasColumnType("int")
                        .HasColumnName("ID_Biblioteca");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly>("HorarioF")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("HorarioI")
                        .HasColumnType("time");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("Telefone")
                        .HasColumnType("bigint");

                    b.HasKey("IdBiblioteca")
                        .HasName("PK__Bibliote__906E4B4CC3FA4858");

                    b.ToTable("Biblioteca", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Bibliotecario", b =>
                {
                    b.Property<string>("UsernameBib")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Bib");

                    b.HasKey("UsernameBib")
                        .HasName("PK__Bibliote__1E4CD8D2F5865935");

                    b.ToTable("Bibliotecario", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Bloquear", b =>
                {
                    b.Property<int>("IdBloqueio")
                        .HasColumnType("int")
                        .HasColumnName("ID_Bloqueio");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataBloqueio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Data_Bloqueio")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdMotivoBloq")
                        .HasColumnType("int")
                        .HasColumnName("ID_MotivoBloq");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsernameAdmin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Admin");

                    b.HasKey("IdBloqueio")
                        .HasName("PK__Bloquear__6267F0075C931E99");

                    b.HasIndex("IdMotivoBloq");

                    b.HasIndex("Username");

                    b.HasIndex("UsernameAdmin");

                    b.ToTable("Bloquear", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.CriaAdmin", b =>
                {
                    b.Property<string>("UsernameAdmin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Admin");

                    b.Property<string>("UsernameNovoAdmin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_NovoAdmin");

                    b.HasIndex("UsernameAdmin");

                    b.HasIndex("UsernameNovoAdmin");

                    b.ToTable("Cria_Admin", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.EntregasAtraso", b =>
                {
                    b.Property<int>("IdEntregas")
                        .HasColumnType("int")
                        .HasColumnName("ID_Entregas");

                    b.Property<int>("IdRequisicao")
                        .HasColumnType("int")
                        .HasColumnName("ID_Requisicao");

                    b.HasKey("IdEntregas")
                        .HasName("PK__Entregas__0FB6D86D817DB75A");

                    b.HasIndex("IdRequisicao");

                    b.ToTable("EntregasAtraso", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.HistoricoRequ", b =>
                {
                    b.Property<int>("IdHistorico")
                        .HasColumnType("int")
                        .HasColumnName("ID_Historico");

                    b.Property<int>("IdRequisicao")
                        .HasColumnType("int")
                        .HasColumnName("ID_Requisicao");

                    b.HasKey("IdHistorico")
                        .HasName("PK__Historic__ECA88795D04FBAF5");

                    b.HasIndex("IdRequisicao");

                    b.ToTable("HistoricoRequ", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Leitore", b =>
                {
                    b.Property<string>("UsernameLei")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Lei");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UsernameLei")
                        .HasName("PK__Leitores__15E92569CF5B3BB7");

                    b.ToTable("Leitores");
                });

            modelBuilder.Entity("Trabalho.Models.Livro", b =>
                {
                    b.Property<long>("Isbn")
                        .HasColumnType("bigint")
                        .HasColumnName("ISBN");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdAutor")
                        .HasColumnType("int")
                        .HasColumnName("ID_Autor");

                    b.Property<int>("IdBiblioteca")
                        .HasColumnType("int")
                        .HasColumnName("ID_Biblioteca");

                    b.Property<int>("NExemplares")
                        .HasColumnType("int")
                        .HasColumnName("N_Exemplares");

                    b.Property<decimal>("Preco")
                        .HasColumnType("money");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsernameBibAdd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_BibAdd");

                    b.HasKey("Isbn")
                        .HasName("PK__Livro__447D36EB33DDD9E3");

                    b.HasIndex("IdAutor");

                    b.HasIndex("IdBiblioteca");

                    b.HasIndex("UsernameBibAdd");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.MotivoBloq", b =>
                {
                    b.Property<int>("IdMotivoBloq")
                        .HasColumnType("int")
                        .HasColumnName("ID_MotivoBloq");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdMotivoBloq")
                        .HasName("PK__MotivoBl__FD6AC615A6A67AE0");

                    b.ToTable("MotivoBloq", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.Requisicao", b =>
                {
                    b.Property<int>("IdRequisicao")
                        .HasColumnType("int")
                        .HasColumnName("ID_Requisicao");

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Data_Devolucao");

                    b.Property<DateTime>("DataRequisicao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Data_Requisicao")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint")
                        .HasColumnName("ISBN");

                    b.Property<string>("UsernameBib")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Bib");

                    b.Property<string>("UsernameLei")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Lei");

                    b.HasKey("IdRequisicao")
                        .HasName("PK__Requisic__7B7D23BB3CB5D882");

                    b.HasIndex("Isbn");

                    b.HasIndex("UsernameBib");

                    b.HasIndex("UsernameLei");

                    b.ToTable("Requisicao", (string)null);
                });

            modelBuilder.Entity("Trabalho.Models.ValidarRegisto", b =>
                {
                    b.Property<int>("IdValid")
                        .HasColumnType("int")
                        .HasColumnName("ID_Valid");

                    b.Property<DateTime>("DataValid")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("Data_Valid");

                    b.Property<string>("UsernameAdmin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Admin");

                    b.Property<string>("UsernameBib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username_Bib");

                    b.Property<bool>("Validado")
                        .HasColumnType("bit");

                    b.HasKey("IdValid")
                        .HasName("PK__ValidarR__7DA04BE5E1DF26D3");

                    b.HasIndex("UsernameAdmin");

                    b.HasIndex("UsernameBib");

                    b.ToTable("ValidarRegisto", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Trabalho.Areas.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Trabalho.Areas.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trabalho.Areas.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Trabalho.Areas.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trabalho.Models.Bibliotecario", b =>
                {
                    b.HasOne("Trabalho.Models.Autenticado", "UsernameBibNavigation")
                        .WithOne("Bibliotecario")
                        .HasForeignKey("Trabalho.Models.Bibliotecario", "UsernameBib")
                        .IsRequired()
                        .HasConstraintName("FK__Bibliotec__Usern__3C69FB99");

                    b.Navigation("UsernameBibNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.Bloquear", b =>
                {
                    b.HasOne("Trabalho.Models.MotivoBloq", "IdMotivoBloqNavigation")
                        .WithMany("Bloquears")
                        .HasForeignKey("IdMotivoBloq")
                        .IsRequired()
                        .HasConstraintName("FK__Bloquear__ID_Mot__4BAC3F29");

                    b.HasOne("Trabalho.Models.Autenticado", "UsernameNavigation")
                        .WithMany("Bloquears")
                        .HasForeignKey("Username")
                        .IsRequired()
                        .HasConstraintName("FK__Bloquear__Userna__4AB81AF0");

                    b.HasOne("Trabalho.Models.Administradore", "UsernameAdminNavigation")
                        .WithMany("Bloquears")
                        .HasForeignKey("UsernameAdmin")
                        .IsRequired()
                        .HasConstraintName("FK__Bloquear__Userna__49C3F6B7");

                    b.Navigation("IdMotivoBloqNavigation");

                    b.Navigation("UsernameAdminNavigation");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.CriaAdmin", b =>
                {
                    b.HasOne("Trabalho.Models.Administradore", "UsernameAdminNavigation")
                        .WithMany()
                        .HasForeignKey("UsernameAdmin")
                        .IsRequired()
                        .HasConstraintName("FK__Cria_Admi__Usern__693CA210");

                    b.HasOne("Trabalho.Models.Administradore", "UsernameNovoAdminNavigation")
                        .WithMany()
                        .HasForeignKey("UsernameNovoAdmin")
                        .IsRequired()
                        .HasConstraintName("FK__Cria_Admi__Usern__6A30C649");

                    b.Navigation("UsernameAdminNavigation");

                    b.Navigation("UsernameNovoAdminNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.EntregasAtraso", b =>
                {
                    b.HasOne("Trabalho.Models.Requisicao", "IdRequisicaoNavigation")
                        .WithMany("EntregasAtrasos")
                        .HasForeignKey("IdRequisicao")
                        .IsRequired()
                        .HasConstraintName("FK__EntregasA__ID_Re__6E01572D");

                    b.Navigation("IdRequisicaoNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.HistoricoRequ", b =>
                {
                    b.HasOne("Trabalho.Models.Requisicao", "IdRequisicaoNavigation")
                        .WithMany("HistoricoRequs")
                        .HasForeignKey("IdRequisicao")
                        .IsRequired()
                        .HasConstraintName("FK__Historico__ID_Re__71D1E811");

                    b.Navigation("IdRequisicaoNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.Leitore", b =>
                {
                    b.HasOne("Trabalho.Models.Autenticado", "UsernameLeiNavigation")
                        .WithOne("Leitore")
                        .HasForeignKey("Trabalho.Models.Leitore", "UsernameLei")
                        .IsRequired()
                        .HasConstraintName("FK__Leitores__Userna__3F466844");

                    b.Navigation("UsernameLeiNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.Livro", b =>
                {
                    b.HasOne("Trabalho.Models.Autor", "IdAutorNavigation")
                        .WithMany("Livros")
                        .HasForeignKey("IdAutor")
                        .IsRequired()
                        .HasConstraintName("FK__Livro__ID_Autor__5DCAEF64");

                    b.HasOne("Trabalho.Models.Biblioteca", "IdBibliotecaNavigation")
                        .WithMany("Livros")
                        .HasForeignKey("IdBiblioteca")
                        .IsRequired()
                        .HasConstraintName("FK__Livro__ID_Biblio__5EBF139D");

                    b.HasOne("Trabalho.Models.Bibliotecario", "UsernameBibAddNavigation")
                        .WithMany("Livros")
                        .HasForeignKey("UsernameBibAdd")
                        .IsRequired()
                        .HasConstraintName("FK__Livro__Username___5CD6CB2B");

                    b.Navigation("IdAutorNavigation");

                    b.Navigation("IdBibliotecaNavigation");

                    b.Navigation("UsernameBibAddNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.Requisicao", b =>
                {
                    b.HasOne("Trabalho.Models.Livro", "IsbnNavigation")
                        .WithMany("Requisicaos")
                        .HasForeignKey("Isbn")
                        .IsRequired()
                        .HasConstraintName("FK__Requisicao__ISBN__6754599E");

                    b.HasOne("Trabalho.Models.Bibliotecario", "UsernameBibNavigation")
                        .WithMany("Requisicaos")
                        .HasForeignKey("UsernameBib")
                        .HasConstraintName("FK__Requisica__Usern__656C112C");

                    b.HasOne("Trabalho.Models.Leitore", "UsernameLeiNavigation")
                        .WithMany("Requisicaos")
                        .HasForeignKey("UsernameLei")
                        .IsRequired()
                        .HasConstraintName("FK__Requisica__Usern__66603565");

                    b.Navigation("IsbnNavigation");

                    b.Navigation("UsernameBibNavigation");

                    b.Navigation("UsernameLeiNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.ValidarRegisto", b =>
                {
                    b.HasOne("Trabalho.Models.Administradore", "UsernameAdminNavigation")
                        .WithMany("ValidarRegistos")
                        .HasForeignKey("UsernameAdmin")
                        .IsRequired()
                        .HasConstraintName("FK__ValidarRe__Usern__5070F446");

                    b.HasOne("Trabalho.Models.Bibliotecario", "UsernameBibNavigation")
                        .WithMany("ValidarRegistos")
                        .HasForeignKey("UsernameBib")
                        .IsRequired()
                        .HasConstraintName("FK__ValidarRe__Usern__5165187F");

                    b.Navigation("UsernameAdminNavigation");

                    b.Navigation("UsernameBibNavigation");
                });

            modelBuilder.Entity("Trabalho.Models.Administradore", b =>
                {
                    b.Navigation("Bloquears");

                    b.Navigation("ValidarRegistos");
                });

            modelBuilder.Entity("Trabalho.Models.Autenticado", b =>
                {
                    b.Navigation("Bibliotecario");

                    b.Navigation("Bloquears");

                    b.Navigation("Leitore");
                });

            modelBuilder.Entity("Trabalho.Models.Autor", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Trabalho.Models.Biblioteca", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Trabalho.Models.Bibliotecario", b =>
                {
                    b.Navigation("Livros");

                    b.Navigation("Requisicaos");

                    b.Navigation("ValidarRegistos");
                });

            modelBuilder.Entity("Trabalho.Models.Leitore", b =>
                {
                    b.Navigation("Requisicaos");
                });

            modelBuilder.Entity("Trabalho.Models.Livro", b =>
                {
                    b.Navigation("Requisicaos");
                });

            modelBuilder.Entity("Trabalho.Models.MotivoBloq", b =>
                {
                    b.Navigation("Bloquears");
                });

            modelBuilder.Entity("Trabalho.Models.Requisicao", b =>
                {
                    b.Navigation("EntregasAtrasos");

                    b.Navigation("HistoricoRequs");
                });
#pragma warning restore 612, 618
        }
    }
}
